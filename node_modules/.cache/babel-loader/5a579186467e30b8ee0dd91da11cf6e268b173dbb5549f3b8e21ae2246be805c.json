{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/a11/homely/src/pages/Login.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { auth } from \"../firebase/firebaseConfig\"; // Import auth from firebaseConfig\nimport { RecaptchaVerifier, signInWithPhoneNumber, PhoneAuthProvider } from 'firebase/auth';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  const [phone, setPhone] = useState(\"\");\n  const [otp, setOtp] = useState(\"\");\n  const [verificationId, setVerificationId] = useState(null);\n  const handleLogin = () => {\n    const recaptchaVerifier = new RecaptchaVerifier(\"recaptcha-container\", {\n      size: \"invisible\" // Optional: Invisible reCAPTCHA\n    }, auth);\n    signInWithPhoneNumber(auth, phone, recaptchaVerifier).then(confirmationResult => {\n      setVerificationId(confirmationResult.verificationId);\n      alert(\"OTP sent to your phone\");\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n  const handleVerifyOtp = () => {\n    const credential = PhoneAuthProvider.credential(verificationId, otp);\n    signInWithPhoneNumber(auth, credential).then(result => {\n      console.log(\"User logged in:\", result.user);\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter phone number\",\n      value: phone,\n      onChange: e => setPhone(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLogin,\n      children: \"Send OTP\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), verificationId && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter OTP\",\n        value: otp,\n        onChange: e => setOtp(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleVerifyOtp,\n        children: \"Verify OTP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"recaptcha-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"TK2kq3Q2HVSZu3/djNhCeuiiizI=\");\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","auth","RecaptchaVerifier","signInWithPhoneNumber","PhoneAuthProvider","jsxDEV","_jsxDEV","Fragment","_Fragment","Login","_s","phone","setPhone","otp","setOtp","verificationId","setVerificationId","handleLogin","recaptchaVerifier","size","then","confirmationResult","alert","catch","error","console","handleVerifyOtp","credential","result","log","user","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","id","_c","$RefreshReg$"],"sources":["/home/user/Documents/a11/homely/src/pages/Login.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { auth } from \"../firebase/firebaseConfig\";  // Import auth from firebaseConfig\nimport { RecaptchaVerifier, signInWithPhoneNumber, PhoneAuthProvider } from 'firebase/auth';\n\nconst Login = () => {\n  const [phone, setPhone] = useState(\"\");\n  const [otp, setOtp] = useState(\"\");\n  const [verificationId, setVerificationId] = useState(null);\n\n  const handleLogin = () => {\n    const recaptchaVerifier = new RecaptchaVerifier(\"recaptcha-container\", {\n      size: \"invisible\",  // Optional: Invisible reCAPTCHA\n    }, auth);\n\n    signInWithPhoneNumber(auth, phone, recaptchaVerifier)\n      .then((confirmationResult) => {\n        setVerificationId(confirmationResult.verificationId);\n        alert(\"OTP sent to your phone\");\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n\n  const handleVerifyOtp = () => {\n    const credential = PhoneAuthProvider.credential(verificationId, otp);\n    signInWithPhoneNumber(auth, credential)\n      .then((result) => {\n        console.log(\"User logged in:\", result.user);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n\n  return (\n    <div>\n      <h2>Login</h2>\n      <input \n        type=\"text\" \n        placeholder=\"Enter phone number\" \n        value={phone} \n        onChange={(e) => setPhone(e.target.value)} \n      />\n      <button onClick={handleLogin}>Send OTP</button>\n\n      {verificationId && (\n        <>\n          <input \n            type=\"text\" \n            placeholder=\"Enter OTP\" \n            value={otp} \n            onChange={(e) => setOtp(e.target.value)} \n          />\n          <button onClick={handleVerifyOtp}>Verify OTP</button>\n        </>\n      )}\n\n      <div id=\"recaptcha-container\"></div>\n    </div>\n  );\n};\n\nexport default Login;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}